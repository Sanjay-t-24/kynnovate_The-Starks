{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":10343757,"sourceType":"datasetVersion","datasetId":6405355}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sanchris/sentiment-analysis-kyn?scriptVersionId=215621905\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"pip install pandas langid\n","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:31:32.905787Z","iopub.execute_input":"2025-01-01T04:31:32.906081Z","iopub.status.idle":"2025-01-01T04:31:37.667216Z","shell.execute_reply.started":"2025-01-01T04:31:32.906046Z","shell.execute_reply":"2025-01-01T04:31:37.666354Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.1.4)\nRequirement already satisfied: langid in /usr/local/lib/python3.10/dist-packages (1.1.6)\nRequirement already satisfied: numpy<2,>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\nRequirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"#  ****PreProcessing****\nRemoval of Emoticons,Spelling Correction and Stemming> \n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport langid\nfrom textblob import TextBlob\nimport re\nimport nltk\nfrom nltk.corpus import wordnet\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:31:40.128682Z","iopub.execute_input":"2025-01-01T04:31:40.128969Z","iopub.status.idle":"2025-01-01T04:31:41.895193Z","shell.execute_reply.started":"2025-01-01T04:31:40.128948Z","shell.execute_reply":"2025-01-01T04:31:41.894197Z"},"trusted":true},"outputs":[],"execution_count":2},{"cell_type":"code","source":"nltk.download('stopwords')\nnltk.download('punkt')\nnltk.download('wordnet')\nnltk.download('omw-1.4')\n\nnltk.data.path.append('/path/to/nltk_data')","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:31:43.938873Z","iopub.execute_input":"2025-01-01T04:31:43.93931Z","iopub.status.idle":"2025-01-01T04:31:44.317033Z","shell.execute_reply.started":"2025-01-01T04:31:43.939285Z","shell.execute_reply":"2025-01-01T04:31:44.316397Z"},"trusted":true},"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package wordnet to /usr/share/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n[nltk_data] Downloading package omw-1.4 to /usr/share/nltk_data...\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# Load your CSV files\ndf = pd.read_csv('/kaggle/input/twitter1/Adani_Wilmar_tweets.csv')\n","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:31:47.948675Z","iopub.execute_input":"2025-01-01T04:31:47.949004Z","iopub.status.idle":"2025-01-01T04:31:47.967134Z","shell.execute_reply.started":"2025-01-01T04:31:47.948977Z","shell.execute_reply":"2025-01-01T04:31:47.966382Z"},"trusted":true},"outputs":[],"execution_count":4},{"cell_type":"code","source":"columns_to_drop = ['countryCode', 'productAsin', 'isVerified','reviewId','filterByKeyword','position','product/listPrice','reviewImages/0','filterByRating','reviewCategoryUrl','product/price','reviewImages/1','reviewImages/2','reviewReaction','reviewUrl','variantAsin','variant','totalCategoryReviews','totalCategoryRatings','reviewedIn']\ndf = df.drop(columns=[col for col in columns_to_drop if col in df.columns])\n\n\n\nprint(df)","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:31:51.189003Z","iopub.execute_input":"2025-01-01T04:31:51.18937Z","iopub.status.idle":"2025-01-01T04:31:51.205687Z","shell.execute_reply.started":"2025-01-01T04:31:51.189307Z","shell.execute_reply":"2025-01-01T04:31:51.204604Z"},"trusted":true},"outputs":[{"name":"stdout","text":"           Topic                                              Tweet\n0   Adani Wilmar  RT @jawharsircar: Adani empire starts cracking...\n1   Adani Wilmar  RT @jawharsircar: Adani empire starts cracking...\n2   Adani Wilmar  RT @RavinderKapur2: BREAKING NEWS ➖ Adani exit...\n3   Adani Wilmar  RT @PriaINC: Breaking ‼️\\n\\nAdani Group to sel...\n4   Adani Wilmar  RT @jawharsircar: Adani empire starts cracking...\n..           ...                                                ...\n95  Adani Wilmar  RT @tanmoyofc: ADANI, MANIPUR &amp; TWO NEWS\\n...\n96  Adani Wilmar  RT @jawharsircar: Adani empire starts cracking...\n97  Adani Wilmar  RT @jawharsircar: Adani empire starts cracking...\n98  Adani Wilmar  RT @tanmoyofc: ADANI, MANIPUR &amp; TWO NEWS\\n...\n99  Adani Wilmar  RT @RavinderKapur2: BREAKING NEWS ➖ Adani exit...\n\n[100 rows x 2 columns]\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"****Language detection,spelling correction,removal of emoticons,stemming****","metadata":{}},{"cell_type":"code","source":"# Function to detect language using langid\ndef detect_language(text):\n    try:\n        lang, _ = langid.classify(text)\n        return lang\n    except:\n        return None","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:32:59.309343Z","iopub.execute_input":"2025-01-01T04:32:59.309674Z","iopub.status.idle":"2025-01-01T04:32:59.313688Z","shell.execute_reply.started":"2025-01-01T04:32:59.309649Z","shell.execute_reply":"2025-01-01T04:32:59.312805Z"},"trusted":true},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# Apply the language detection\ndf['language'] = df['Tweet'].apply(detect_language)","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:33:01.811115Z","iopub.execute_input":"2025-01-01T04:33:01.811474Z","iopub.status.idle":"2025-01-01T04:33:03.817172Z","shell.execute_reply.started":"2025-01-01T04:33:01.811447Z","shell.execute_reply":"2025-01-01T04:33:03.815951Z"},"trusted":true},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# Filter for the desired language, e.g., English\ndf = df[df['language'] == 'en']","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:33:07.659003Z","iopub.execute_input":"2025-01-01T04:33:07.659419Z","iopub.status.idle":"2025-01-01T04:33:07.66448Z","shell.execute_reply.started":"2025-01-01T04:33:07.659298Z","shell.execute_reply":"2025-01-01T04:33:07.663347Z"},"trusted":true},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Function to correct spelling\ndef correct_spelling(text):\n    return str(TextBlob(text).correct())","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:33:10.958585Z","iopub.execute_input":"2025-01-01T04:33:10.958934Z","iopub.status.idle":"2025-01-01T04:33:10.963275Z","shell.execute_reply.started":"2025-01-01T04:33:10.958905Z","shell.execute_reply":"2025-01-01T04:33:10.962201Z"},"trusted":true},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# Apply spelling correction\n#df['Tweet'] = df['Tweet'].apply(correct_spelling)\ndf.loc[:, 'Tweet'] = df['Tweet'].apply(correct_spelling)\n","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:33:12.95409Z","iopub.execute_input":"2025-01-01T04:33:12.954491Z","iopub.status.idle":"2025-01-01T04:34:56.999513Z","shell.execute_reply.started":"2025-01-01T04:33:12.954465Z","shell.execute_reply":"2025-01-01T04:34:56.998735Z"},"trusted":true},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Function to remove emoticons and non-ASCII characters\ndef remove_emoticons(text):\n    # Remove emoticons\n    text = re.sub(r'[\\U00010000-\\U0010ffff]', '', text)\n    # Remove non-ASCII characters\n    text = re.sub(r'[^\\x00-\\x7f]',r'', text)\n    return text","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:36:25.649733Z","iopub.execute_input":"2025-01-01T04:36:25.650088Z","iopub.status.idle":"2025-01-01T04:36:25.654306Z","shell.execute_reply.started":"2025-01-01T04:36:25.650061Z","shell.execute_reply":"2025-01-01T04:36:25.653274Z"},"trusted":true},"outputs":[],"execution_count":11},{"cell_type":"code","source":"# Apply removal\ndf['Tweet'] = df['Tweet'].apply(remove_emoticons)","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:36:28.328997Z","iopub.execute_input":"2025-01-01T04:36:28.32934Z","iopub.status.idle":"2025-01-01T04:36:28.33496Z","shell.execute_reply.started":"2025-01-01T04:36:28.329295Z","shell.execute_reply":"2025-01-01T04:36:28.333896Z"},"trusted":true},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Function to remove stopwords\nstop_words = set(stopwords.words('english'))\n\ndef remove_stopwords(text):\n    words = text.split()\n    filtered_words = [word for word in words if word.lower() not in stop_words]\n    return ' '.join(filtered_words)","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:36:33.718873Z","iopub.execute_input":"2025-01-01T04:36:33.719206Z","iopub.status.idle":"2025-01-01T04:36:33.725899Z","shell.execute_reply.started":"2025-01-01T04:36:33.719168Z","shell.execute_reply":"2025-01-01T04:36:33.7251Z"},"trusted":true},"outputs":[],"execution_count":13},{"cell_type":"code","source":"df['cleaned_review'] = df['Tweet'].apply(remove_stopwords)","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:36:35.789191Z","iopub.execute_input":"2025-01-01T04:36:35.789513Z","iopub.status.idle":"2025-01-01T04:36:35.794891Z","shell.execute_reply.started":"2025-01-01T04:36:35.789489Z","shell.execute_reply":"2025-01-01T04:36:35.793878Z"},"trusted":true},"outputs":[],"execution_count":14},{"cell_type":"code","source":"stemmer = PorterStemmer()\n\ndef stem_words(text):\n    words = text.split()\n    stemmed_words = [stemmer.stem(word) for word in words]\n    return ' '.join(stemmed_words)","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:36:39.068576Z","iopub.execute_input":"2025-01-01T04:36:39.068878Z","iopub.status.idle":"2025-01-01T04:36:39.073233Z","shell.execute_reply.started":"2025-01-01T04:36:39.068851Z","shell.execute_reply":"2025-01-01T04:36:39.072209Z"},"trusted":true},"outputs":[],"execution_count":15},{"cell_type":"code","source":"df['stemmed_review'] = df['cleaned_review'].apply(stem_words)","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:36:41.148748Z","iopub.execute_input":"2025-01-01T04:36:41.149041Z","iopub.status.idle":"2025-01-01T04:36:41.183781Z","shell.execute_reply.started":"2025-01-01T04:36:41.149016Z","shell.execute_reply":"2025-01-01T04:36:41.182921Z"},"trusted":true},"outputs":[],"execution_count":16},{"cell_type":"code","source":"df['cleaned_review'] = df['cleaned_review'].str.replace(r'\\bcup\\b', 'CPU', regex=True)","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:36:43.788706Z","iopub.execute_input":"2025-01-01T04:36:43.788984Z","iopub.status.idle":"2025-01-01T04:36:43.794467Z","shell.execute_reply.started":"2025-01-01T04:36:43.788963Z","shell.execute_reply":"2025-01-01T04:36:43.793345Z"},"trusted":true},"outputs":[],"execution_count":17},{"cell_type":"code","source":"def split_into_lists(text):\n    word_list = text.split()\n    return [[word] for word in word_list]\n","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:36:45.809156Z","iopub.execute_input":"2025-01-01T04:36:45.80948Z","iopub.status.idle":"2025-01-01T04:36:45.813434Z","shell.execute_reply.started":"2025-01-01T04:36:45.809454Z","shell.execute_reply":"2025-01-01T04:36:45.812413Z"},"trusted":true},"outputs":[],"execution_count":18},{"cell_type":"code","source":"df['cleaned_review2'] = df['cleaned_review'].apply(lambda x: split_into_lists(x))","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:36:47.948593Z","iopub.execute_input":"2025-01-01T04:36:47.948917Z","iopub.status.idle":"2025-01-01T04:36:47.954146Z","shell.execute_reply.started":"2025-01-01T04:36:47.94889Z","shell.execute_reply":"2025-01-01T04:36:47.953257Z"},"trusted":true},"outputs":[],"execution_count":19},{"cell_type":"code","source":"#df = df.drop(columns='corrected_review')\nprint(df)","metadata":{"execution":{"iopub.status.busy":"2025-01-01T04:37:16.979319Z","iopub.execute_input":"2025-01-01T04:37:16.979635Z","iopub.status.idle":"2025-01-01T04:37:17.008429Z","shell.execute_reply.started":"2025-01-01T04:37:16.979612Z","shell.execute_reply":"2025-01-01T04:37:17.007609Z"},"trusted":true},"outputs":[{"name":"stdout","text":"           Topic                                              Tweet language  \\\n0   Adani Wilmar  of @jawharsircar: Dans empire starts cracking ...       en   \n1   Adani Wilmar  of @jawharsircar: Dans empire starts cracking ...       en   \n2   Adani Wilmar  of @RavinderKapur2: BREAKING NEWS  Dans exist ...       en   \n3   Adani Wilmar  of @PriaINC: Breaking \\n\\nDans Group to sell 4...       en   \n4   Adani Wilmar  of @jawharsircar: Dans empire starts cracking ...       en   \n..           ...                                                ...      ...   \n95  Adani Wilmar  of @tanmoyofc: ADANI, MANIPUR &amp; TWO NEWS\\n...       en   \n96  Adani Wilmar  of @jawharsircar: Dans empire starts cracking ...       en   \n97  Adani Wilmar  of @jawharsircar: Dans empire starts cracking ...       en   \n98  Adani Wilmar  of @tanmoyofc: ADANI, MANIPUR &amp; TWO NEWS\\n...       en   \n99  Adani Wilmar  of @RavinderKapur2: BREAKING NEWS  Dans exist ...       en   \n\n                                       cleaned_review  \\\n0   @jawharsircar: Dans empire starts cracking up!...   \n1   @jawharsircar: Dans empire starts cracking up!...   \n2   @RavinderKapur2: BREAKING NEWS Dans exist FMCG...   \n3   @PriaINC: Breaking Dans Group sell 44% stake D...   \n4   @jawharsircar: Dans empire starts cracking up!...   \n..                                                ...   \n95  @tanmoyofc: ADANI, MANIPUR &amp; TWO NEWS Conn...   \n96  @jawharsircar: Dans empire starts cracking up!...   \n97  @jawharsircar: Dans empire starts cracking up!...   \n98  @tanmoyofc: ADANI, MANIPUR &amp; TWO NEWS Conn...   \n99  @RavinderKapur2: BREAKING NEWS Dans exist FMCG...   \n\n                                       stemmed_review  \\\n0   @jawharsircar: dan empir start crack up! dan s...   \n1   @jawharsircar: dan empir start crack up! dan s...   \n2   @ravinderkapur2: break new dan exist fmcg segm...   \n3   @priainc: break dan group sell 44% stake dan p...   \n4   @jawharsircar: dan empir start crack up! dan s...   \n..                                                ...   \n95  @tanmoyofc: adani, manipur &amp; two new conne...   \n96  @jawharsircar: dan empir start crack up! dan s...   \n97  @jawharsircar: dan empir start crack up! dan s...   \n98  @tanmoyofc: adani, manipur &amp; two new conne...   \n99  @ravinderkapur2: break new dan exist fmcg segm...   \n\n                                      cleaned_review2  \n0   [[@jawharsircar:], [Dans], [empire], [starts],...  \n1   [[@jawharsircar:], [Dans], [empire], [starts],...  \n2   [[@RavinderKapur2:], [BREAKING], [NEWS], [Dans...  \n3   [[@PriaINC:], [Breaking], [Dans], [Group], [se...  \n4   [[@jawharsircar:], [Dans], [empire], [starts],...  \n..                                                ...  \n95  [[@tanmoyofc:], [ADANI,], [MANIPUR], [&amp;], ...  \n96  [[@jawharsircar:], [Dans], [empire], [starts],...  \n97  [[@jawharsircar:], [Dans], [empire], [starts],...  \n98  [[@tanmoyofc:], [ADANI,], [MANIPUR], [&amp;], ...  \n99  [[@RavinderKapur2:], [BREAKING], [NEWS], [Dans...  \n\n[98 rows x 6 columns]\n","output_type":"stream"}],"execution_count":22},{"cell_type":"markdown","source":"# ****Step2: Sentiment Analysis using pipeline****","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom transformers import pipeline\n\n# Load preprocessed Twitter reviews from a CSV file\n\"\"\"csv_file = \"/kaggle/input/twitter1/Adani_Wilmar_tweets.csv\"  # Replace with your file path\ndata = pd.read_csv(csv_file)\"\"\"\n\n# Ensure the column containing preprocessed tweets is named 'cleaned_text'\nif \"cleaned_review\" not in df.columns:\n    raise ValueError(\"CSV file must contain a 'cleaned_text' column with preprocessed tweets.\")\n\n# Load sentiment analysis pipeline\nsentiment_pipeline = pipeline(\"sentiment-analysis\", model=\"cardiffnlp/twitter-roberta-base-sentiment\")\n\n# Perform sentiment analysis\ndf[\"sentiment\"] = df[\"cleaned_review\"].apply(lambda x: sentiment_pipeline(x)[0][\"label\"])\ndf[\"confidence\"] = df[\"cleaned_review\"].apply(lambda x: sentiment_pipeline(x)[0][\"score\"])\n\n# Save the results to a new CSV file\noutput_file = \"twitter_sentiment_analysis_results.csv\"\ndf.to_csv(output_file, index=False)\n\nprint(f\"Sentiment analysis completed. Results saved to {output_file}.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-01T04:37:38.310445Z","iopub.execute_input":"2025-01-01T04:37:38.310782Z","iopub.status.idle":"2025-01-01T04:38:16.04818Z","shell.execute_reply.started":"2025-01-01T04:37:38.310759Z","shell.execute_reply":"2025-01-01T04:38:16.047275Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/747 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f3c3a8e8a1444fee8c5d48201daa1f67"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/499M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"df7d467a2be74987b6118410426a9213"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.json:   0%|          | 0.00/899k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f86950c977314b56b472a38249742eec"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ea0b730481854b3ab916ce9f849bb300"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/150 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f3b05ea8f0d54b54b24913cb6189cdb9"}},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\nHardware accelerator e.g. GPU is available in the environment, but no `device` argument is passed to the `Pipeline` object. Model will be on CPU.\n","output_type":"stream"},{"name":"stdout","text":"Sentiment analysis completed. Results saved to twitter_sentiment_analysis_results.csv.\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom transformers import pipeline\n\n# Load the sentiment analysis results from the CSV file\ninput_file = \"/kaggle/working/twitter_sentiment_analysis_results.csv\"  # Replace with your file path\ndata = pd.read_csv(input_file)\n\n# Check if necessary columns exist\nif \"sentiment\" not in data.columns:\n    raise ValueError(\"The CSV file must contain a 'sentiment' column.\")\n\n# Re-map sentiment labels to 'Positive', 'Negative', 'Neutral' if necessary\nlabel_mapping = {\n    \"LABEL_0\": \"negative\",  # This maps the original sentiment labels to your desired ones\n    \"LABEL_1\": \"neutral\",\n    \"LABEL_2\": \"positive\"\n}\n\n# Replace sentiment labels with the new mapping (if they follow the Hugging Face model output format)\ndata['sentiment'] = data['sentiment'].map(label_mapping)\n\n# Count the occurrences of each sentiment\nsentiment_counts = data[\"sentiment\"].value_counts()\ntotal_tweets = sentiment_counts.sum()\n\n# Calculate proportions\nsentiment_proportions = (sentiment_counts / total_tweets) * 100\n\n# Display sentiment distribution as a bar chart\nplt.figure(figsize=(8, 6))\nsns.barplot(x=sentiment_counts.index, y=sentiment_counts.values, palette=\"viridis\")\nplt.title(\"Sentiment Distribution\")\nplt.xlabel(\"Sentiment\")\nplt.ylabel(\"Count\")\nplt.show()\n\n# Display sentiment distribution as a pie chart\nplt.figure(figsize=(8, 6))\nplt.pie(\n    sentiment_counts.values,\n    labels=sentiment_counts.index,\n    autopct='%1.1f%%',\n    startangle=140,\n    colors=sns.color_palette(\"viridis\", len(sentiment_counts)),\n)\nplt.title(\"Sentiment Distribution\")\nplt.show()\n\n# Insights and Recommendations\nprint(\"\\n--- Insights and Recommendations ---\\n\")\n\n# Display insights\nprint(\"Sentiment Proportions:\")\nfor sentiment, proportion in sentiment_proportions.items():\n    print(f\"{sentiment.capitalize()}: {proportion:.2f}%\")\n\n# Provide recommendations based on the analysis\nprint(\"\\nRecommendations:\")\nif sentiment_proportions.get(\"negative\", 0) > 50:\n    print(\"- High proportion of negative sentiments detected. Address recurring issues, analyze specific complaints, and take immediate corrective actions.\")\nelif sentiment_proportions.get(\"positive\", 0) > 50:\n    print(\"- Majority positive sentiments! Maintain or enhance the aspects users appreciate.\")\nelif sentiment_proportions.get(\"neutral\", 0) > 50:\n    print(\"- High neutral sentiment indicates indifference. Look for ways to engage your audience more effectively.\")\nelse:\n    print(\"- Balanced sentiment distribution. Focus on amplifying positive sentiments and reducing negatives.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-01T04:41:12.632704Z","iopub.execute_input":"2025-01-01T04:41:12.633015Z","iopub.status.idle":"2025-01-01T04:41:12.991016Z","shell.execute_reply.started":"2025-01-01T04:41:12.632991Z","shell.execute_reply":"2025-01-01T04:41:12.989586Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n--- Insights and Recommendations ---\n\nSentiment Proportions:\nNeutral: 96.94%\nPositive: 2.04%\nNegative: 1.02%\n\nRecommendations:\n- High neutral sentiment indicates indifference. Look for ways to engage your audience more effectively.\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.decomposition import LatentDirichletAllocation\n\n# Load the preprocessed data from CSV file\ncsv_file = \"/kaggle/working/twitter_sentiment_analysis_results.csv\"  # Replace with your actual file path\ndata = pd.read_csv(csv_file)\n\n# Ensure that the CSV file contains a column named 'cleaned_text' or the name of your preprocessed text column\nif 'stemmed_review' not in data.columns:\n    raise ValueError(\"CSV file must contain a 'cleaned_text' column with the preprocessed data.\")\n\n# Vectorize the text (convert text into document-term matrix)\nvectorizer = CountVectorizer(max_df=0.95, min_df=2, stop_words='english')\ndtm = vectorizer.fit_transform(data['stemmed_review'])\n\n# Apply LDA to identify topics\nn_topics = 1  # Set to 1 to focus on a single topic\nlda = LatentDirichletAllocation(n_components=n_topics, random_state=42)\nlda.fit(dtm)\n\n# Function to display the top words for the first topic\ndef display_top_keywords_for_topic(model, feature_names, n_top_words):\n    topic_idx = 0  # We are only focusing on the first topic (topic 0)\n    topic = model.components_[topic_idx]\n    print(f\"Top {n_top_words} keywords for Topic #{topic_idx + 1}:\")\n    print(\", \".join([feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]]))\n\n# Display the top 4 or 5 keywords for the first topic\nn_top_words = 5  # Change this to 4 if you want only 4 keywords\nfeature_names = vectorizer.get_feature_names_out()\ndisplay_top_keywords_for_topic(lda, feature_names, n_top_words)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-01T04:41:17.259818Z","iopub.execute_input":"2025-01-01T04:41:17.260101Z","iopub.status.idle":"2025-01-01T04:41:17.36893Z","shell.execute_reply.started":"2025-01-01T04:41:17.26008Z","shell.execute_reply":"2025-01-01T04:41:17.368035Z"}},"outputs":[{"name":"stdout","text":"Top 5 keywords for Topic #1:\ndan, new, connect, oil, adani\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"!pip install openai pandas matplotlib\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-01T04:41:32.469562Z","iopub.execute_input":"2025-01-01T04:41:32.470055Z","iopub.status.idle":"2025-01-01T04:41:37.543107Z","shell.execute_reply.started":"2025-01-01T04:41:32.470016Z","shell.execute_reply":"2025-01-01T04:41:37.542231Z"}},"outputs":[{"name":"stderr","text":"/usr/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Collecting openai\n  Downloading openai-1.58.1-py3-none-any.whl.metadata (27 kB)\nRequirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.1.4)\nRequirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\nRequirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.10/dist-packages (from openai) (3.7.1)\nRequirement already satisfied: distro<2,>=1.7.0 in /usr/lib/python3/dist-packages (from openai) (1.7.0)\nCollecting httpx<1,>=0.23.0 (from openai)\n  Downloading httpx-0.28.1-py3-none-any.whl.metadata (7.1 kB)\nCollecting jiter<1,>=0.4.0 (from openai)\n  Downloading jiter-0.8.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.2 kB)\nRequirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from openai) (2.9.2)\nRequirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from openai) (1.3.1)\nRequirement already satisfied: tqdm>4 in /usr/local/lib/python3.10/dist-packages (from openai) (4.66.5)\nRequirement already satisfied: typing-extensions<5,>=4.11 in /usr/local/lib/python3.10/dist-packages (from openai) (4.12.2)\nRequirement already satisfied: numpy<2,>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\nRequirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.0)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.53.1)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\nRequirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (10.4.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.4)\nRequirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai) (3.10)\nRequirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai) (1.2.2)\nRequirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (2024.8.30)\nCollecting httpcore==1.* (from httpx<1,>=0.23.0->openai)\n  Downloading httpcore-1.0.7-py3-none-any.whl.metadata (21 kB)\nCollecting h11<0.15,>=0.13 (from httpcore==1.*->httpx<1,>=0.23.0->openai)\n  Downloading h11-0.14.0-py3-none-any.whl.metadata (8.2 kB)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->openai) (0.7.0)\nRequirement already satisfied: pydantic-core==2.23.4 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->openai) (2.23.4)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\nDownloading openai-1.58.1-py3-none-any.whl (454 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m454.3/454.3 kB\u001b[0m \u001b[31m9.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mta \u001b[36m0:00:01\u001b[0m\n\u001b[?25hDownloading httpx-0.28.1-py3-none-any.whl (73 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.5/73.5 kB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading httpcore-1.0.7-py3-none-any.whl (78 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.6/78.6 kB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading jiter-0.8.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (345 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m345.0/345.0 kB\u001b[0m \u001b[31m21.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading h11-0.14.0-py3-none-any.whl (58 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.3/58.3 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: jiter, h11, httpcore, httpx, openai\nSuccessfully installed h11-0.14.0 httpcore-1.0.7 httpx-0.28.1 jiter-0.8.2 openai-1.58.1\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n# Load your preprocessed sentiment data from a CSV file\ncsv_file = \"/kaggle/working/twitter_sentiment_analysis_results.csv\"  # Replace with your actual file path\ndata = pd.read_csv(csv_file)\n\n# Ensure the CSV has a 'sentiment' column\nif 'sentiment' not in data.columns:\n    raise ValueError(\"CSV file must contain a 'sentiment' column.\")\n\n# Handle missing or invalid sentiment values\n# Remove rows with missing or invalid sentiment values\nvalid_sentiments = ['positive', 'negative', 'neutral']\ndata = data[data['sentiment'].isin(valid_sentiments)]\n\n# Count sentiment occurrences\nsentiment_counts = Counter(data['sentiment'])\ntotal_tweets = len(data)\n\n# If no valid sentiment data, print a message and exit\nif total_tweets == 0:\n    print(\"No valid sentiment data available.\")\nelse:\n    # Calculate percentages\n    positive_count = sentiment_counts.get('positive', 0)\n    negative_count = sentiment_counts.get('negative', 0)\n    neutral_count = sentiment_counts.get('neutral', 0)\n\n    positive_percentage = (positive_count / total_tweets) * 100\n    negative_percentage = (negative_count / total_tweets) * 100\n    neutral_percentage = (neutral_count / total_tweets) * 100\n\n    # Generate a visualization for sentiment distribution\n    plt.figure(figsize=(8, 6))\n    plt.pie([positive_percentage, negative_percentage, neutral_percentage],\n            labels=['Positive', 'Negative', 'Neutral'],\n            autopct='%1.1f%%',\n            startangle=90,\n            colors=['#4CAF50', '#F44336', '#FFC107'])\n    plt.title('Sentiment Distribution of Twitter Posts')\n    plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-01T04:51:09.76047Z","iopub.execute_input":"2025-01-01T04:51:09.760797Z","iopub.status.idle":"2025-01-01T04:51:09.772575Z","shell.execute_reply.started":"2025-01-01T04:51:09.760773Z","shell.execute_reply":"2025-01-01T04:51:09.771607Z"}},"outputs":[{"name":"stdout","text":"No valid sentiment data available.\n","output_type":"stream"}],"execution_count":30}]}